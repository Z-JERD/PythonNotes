########################MYSQL#####################

1.列举常见的关系型数据库和非关系型都有那些？
	关系型数据库：Oracle,MySQL,sql Server
	非关系型数据库：NoSql,MongoDb,redis
	关系型数据库的特性:
		1.采用了关系模型来组织数据(有固定的模式)
		2.关系型数据库的最大特点就是事务的一致性(支持事物)
		3.支持SQL,用于复杂的查询(强大的查询语言)
		4.遵循ACID(原子性，一致性，隔离性和持久性)
		缺点:读写性能比较差；
	非关系型数据库：
		1.使用键值对存储数据(无固定的模式)
		2.无需经过sql层的解析，读写性能很高(支持简单查询语言)
		3.基于键值对，数据没有耦合性，容易扩展
		4.只有'最终一致'
		
		缺点：1.不提供sql支持
			  2.无事务处理
2.MySQL常见数据库引擎及比较？
     MyISAM	 InnoDB	 Memory	 Archive	NDB
	常用的是innodb与MyIASM存储引擎
	不同处：
	1.innodb 是mysql5.5版本以后的默认存储引擎, 而MyISAM是5.5版本以前的默认存储引擎
	2.innodb 支持事物,而MyISAM不支持事物
	3.innodb 支持行级锁.而MyIASM 它支持的是并发的表级锁.
	4.innodb 支持外键, 而MyIASM 不支持外键
	5.innodb与MyIASM存储引擎都采用B+TREE存储数据
		但是innodb的索引与数据存储在一个文件中,采用聚集索引. 
		而MyIASM数据与索引是分离开的，采用给辅助索引
	6.在效率方面MyISAM比innodb高,但是在性能方面innodb要好一点.
		大容量的数据查询时趋向于选择Innodb。
			它支持事务处理和故障的恢复.主键的查询在Innodb也是比较快的.
		大批量的插入语句时.在MyIASM引擎中执行的比较的快
3.简述数据三大范式？
	1.确保每列保持原子性,每个字段不能分割出其他的属性
		省份还能分出市,市分县
	2.确保每列都和主键相关,属性完全依赖主键
		比如订单编号,房间号,联系人，联系人电话,身份证号
	3.确保表中每一列都和主键列直接相关,而不是间接相关
		即数据不能存在传递关系
		比如Student表（学号，姓名,所在院校,院校地址，院校电话）
**4.什么是事务？MySQL如何支持事务？
	事务就是一组sql语句批量执行,要么全部执行成功,要么全部执行失败
	当多个用户使用相同的数据源时,它可以利用锁定数据库的方法为用户提供一种安全的访问方式
	事务的四大特性：
		1.原子性:要么全都执行,要么全不执行
		2.一致性：数据库原来有什么约束,执行之后还需要有这样的约束
		3.隔离性:不同事务之间相互独立
		4.持久性：即使系统故障也一直保持
	事务是用来管理insert update delete语句的
	MYSQL的事务处理主要有两种方法
	　1.用begin,rollback,commit来实现
		begin开始一个事务
	　　rollback事务回滚
	　　commit 事务确认
		只将当前的操作作为一个事务
	  2.直接用set来改变mysql的自动提交模式 
		mysql默认是自动提交的,也就是你提交一个query，就直接执行
		 set autocommit = 0 禁止自动提交
		 set autocommit = 1 开启自动提交
		使用 set autocommit = 0时,将所有的SQL都将作为事务处理,直到使用commit确认或rollback结束
		但是结束这个事务的同时也开启了个新的事务
	start transaction; / begin   -- 开启事务
	update user set money=money-100 where id=1;
	.......
	commit; 
5.简述数据库设计中一对多和多对多的应用场景？
	一对多：学生与班级---一个学生只能属于一个班级，一个班级可以有多个学生
	多对多：学生与课程---一个学生可以选择多个课程，一个课程也可以被多个学生选择
6.设置一个商品计数的列 自动递增为1
	设置一个商品计数的列,自动递增为1
	create table product(id primary key auto_increment,
						 panme varchar(64),
						 pconut int);
	
	)
**7.简述触发器、函数、视图、存储过程？
	视图:
		视图是由查询结果形成的一张虚拟表,不占物理存储空间
		优点:集中用户使用的数据,掩盖了数据的复杂性
		操作：create view view_name as select 语句
	触发器:监视某种情况,并触发某种操作
		触发器是MySQL在insert、update、delete的时候自动执行的代码块
		触发器必须定义在特定的表上,自动执行,不能直接调用
		格式：
		create trigger '触发器名称'  触发时间(after|before)' 监听的事情(insert|update|delete) on 表名
	　　for each row
	　　 begin
	　　 sql语句：（触发的语句一句或多句）
	　　 end
	函数:MySQL中提供了许多内置函数,还可以自定义函数
	 如：数学函数 ABS(X):返回X的绝对值
	 视图需要先定义,然后调用这个函数,必须要返回数据——要有返回值
	 自定义函数
		CREATE FUNCTION fun1(i1 int,i2 int)
		RETURNS INT //设置返回类型
		BEGIN
			DECLARE sum int default 0;
			set sum = i1+i2;
			RETURN(sum); //返回结果
		end
		调用自定义函数
		直接调用自定义函数 select fun1(1,5);
		在sql语句中使用自定义函数 select fun1(参数1,参数2),name from 表名
		删除自定义函数 DROP FUNCTION fun_name;
	存储过程:为了完成某个数据库中的特定功能而编写的语句集合
		MySQL数据库在5.0版本后开始支持存储过程
		存储过程,概念类似于函数,就是把一段代码封装起来，当要执行这一段代码的时候，
		可以通过调用该存储过程来实现
		mysql中有三种出入参数类型:分别为:1. in入参类型2.out 出参类型 3.inout 出入参类型
		存储过程和函数的区别：
			1.本质上没区别。函数只能返回一个变量,而存储过程可以返回多个。
			2.存储过程的参数可以有IN(入参类型),OUT(出参类型),INOUT三种类型,而函数只能有IN类
			3.存储过程一般是作为一个独立的部分来执行(EXECUTE)语句执行
			  函数可以作为查询语句的一个部分来调用（SELECT)调用
			4.SQL语句中不可用存储过程，而可以使用函数	
**8.MySQL索引种类
	普通索引:加速查询,它没有任何限制,直接在某个字段加上索引就可以了
	主键索引:加速索引和唯一约束,索引列的值必须唯一不允许有空值
	唯一索引:加速索引和唯一约束,索引列的值必须唯一，但允许有空值
	组合索引(最左前缀)：将n个列组合成一个索引,列值的组合必须唯一,创建方法和普通索引类似
		组合索引：ALTER TABLE article ADD INDEX index_titme_time (title(50),time(10))
		相当于建立了下面两组组合索引：
		–title,time
		–title
		未用到索引
		SELECT * FROM article WHREE time=1234567890;
		用到了索引：
		SELECT * FROM article WHREE title='测
		其应用场景为：频繁的同时使用n列来进行查询，如：where n1 = 'jerd' and n2 = 666

	主键和唯一索引的区别：
        1、主键既是约束也是索引，唯一索引是一种索引，是表的冗余数据结构
        2.一张表只能有一个主键，但可以创建多个唯一索引；
        3、.主键创建后一定会创建一个唯一索引，但是有唯一索引的列并不一定是主键；
        4、.主键不能为null，唯一索引可以为null；
        5.、主键可以做为一个表的外键，唯一索引不行；

***9.索引在什么情况下遵循最左前缀的规则？
	索引index1:(a,b,c)有三个字段
	均不走索引:
		select * from table where c = '1'
		select * from table where b =‘1’ and c ='2' 
	走index1索引：
		select * from table where a = '1'  
		select * from table where a = '1' and b = ‘2’  
		select * from table where a = '1' and b = ‘2’  and c='3'
	select * from table where a = '1' and c= ‘2’
	只走a字段索引，不会走c字段
	原理：索引index1:(a,b,c)
	只会走a、a,b、a,b,c 三种类型的查询,a,c也走，但是只走a字段索引，不会走c字段
	select * from table where a = '1' and b > ‘2’  and c='3'
	这种类型的只会有a与b走索引,c不会走
	在a、b走完索引后，c肯定是无序了，所以c就没法走索引
10.主键和外键的区别？
	主键:唯一标识一条记录,不能有重复的,不允许为空
	作用：用来保证数据完整性
	主键既是约束也是索引
	外键:外键是另一表的主键, 外键可以有重复的, 可以是空值
	作用:保证数据的关联性
11.MySQL常见的函数？
	1.数学函数
		ABS(X):返回X的绝对值
		MOD(N,M)或%:返回N被M除的余数
	2.字符串函数
		LENGTH(str):返回字符串str的长度
		CONCAT(str1,str2,...):返回来自于参数连结的字符串
	3.日期和时间函数
		WEEKDAY(date):返回date的星期索引
		YEAR(date):返回date的年份
	4.条件判断函数
		IF(expr1,expr2,expr3) 
	5.系统信息函数
		VERSION()函数返回数据库的版本号
	6.加密函数
	加密函数PASSWORD(str)
	加密函数MD5(str)
	7.格式化函数
		FORMAT(x,n)函数可以将数字x进行格式化，将x保留到小数点后n位

12.列举 创建索引但是无法命中索引的8种情况。
	1.如果条件中有or
	2.多列索引,使用的不是第一部分(不是最左前缀)
	3.like查询以"%"开头
	4.如果列类型是字符串,在条件中将数据使用引号引用起来,否则不使用索引
		select * from "order" where name="jerd"
	5.如果使用全表扫描比使用索引快,就不使用索引
	6.提示不使用索引
	7.统计数据不真实
	8.对小表查询
	9.查询条件没建立索引
	10.索引本身失效

**13.如何开启慢日志查询？
	作用:将影响数据库性能的sql语句记录到日志文件,通过对这些sql语句分析改进来提高数据库的性能
	1.查看慢查询相关参数：
		show variables like 'slow_query%'
	2.将 slow_query_log 全局变量设置为“ON”状态
	3.设置慢查询日志存放的位置
	4.设置记录时间
		set global long_query_time=1;
	永久生效/etc/my.cnf：
	[mysqld]
	slow_query_log = ON
	slow_query_log_file = /var/lib/mysql/test-10-226-slow.log
	long_query_time = 1

14.数据库导入导出命令（结构+数据）？
	1.导出：
	将数据库dbname库结构和数据
	mysqldump -uroot -ppasswd dbname >db.sql
	导出dbname库数据
	mysqldump -uroot -ppasswd  dbname test >db.sql;
	导出dbname库test表结构和数据
	mysqldump -uroot -ppasswd -d dbname test>db.sql;
	2.导入
	mysql -uroot -ppasswd dbname <db.sql 

**15.数据库优化方案？
	1.选取最适用的字段属性
		表中字段的宽度设得尽可能小
		尽量把字段设置为NOT NULL
	2.适用连接(join)来代替子查询
		子查询可以一次性的完成很多的复杂SQL操作,避免事务或者表锁死
		但JOIN的效率更高
		原因：执行子查询时，MYSQL需要创建临时表，查询完毕后再删除这些临时表，所以，子查询的速度会受到一定的影响
		       连接查询不需要建立临时表，因此其速度比子查询快。
	3.使用联合(UNION)来代替手动创建临时表
		每次使用临时表,都要创建和删除
		union：SELECT Name, Phone FROM client UNION SELECT Name, BirthDate FROM author UNION SELECT Name, Supplier FROM product
		创建临时表：CREATE TEMPORARY TABLE tmp_table SELECT * FROM table_name
	4.使用事务
		保持数据库中数据的一致性和完整性
	5.锁定表,来维护数据的完整性
		事务执行的过程中,数据库将会被锁定,会影响数据库的性能
		通过锁定表的方法来获得更好的性能
	6.使用外键,保证数据的关联性
		锁定表的方法可以维护数据的完整性，但是它却不能保证数据的关联性
	7.使用索引
		索引是提高数据库性能的常用方法
		用于JOIN,WHERE判断和ORDERBY排序的字段上
	8.优化查询语句
		1.尽量避免全表扫描
		2.在建有索引的字段上尽量不要使用函数进行操作
		3.尽量少用LIKE关键字和通配符
	数据库级别的优化：
	1.使用数据库的主从配置,读写分离
	2.分库分表
	1.对查询进行优化,要,首先应考虑在 where 及 order by 涉及的列上建立索引

16.char和varchar的区别？
	都表示字符型数据类型
	char表示固定长度的字符串 浪费空间，存取速度快
	varchar变长的字符串 节省空间，存取速度慢

**17.简述MySQL的执行计划？
	MySql提供了EXPLAIN语法用来进行查询分析，在SQL语句前加一个"EXPLAIN"即可
	分析如下SQL语句：
	explain select * from table where table.id = 1 
	运行上面的sql语句后你会看到，下面的表头信息：
	
	1.select_type :                          显示查询类型： simple 简单查询 primary 最外层查询 derived 子查询 union联合
	2.table                                  显示这一行的数据是关于哪张表的
        3.type                                   连接的类型 
                                                 type=NULL　在优化过程中就已得到结果，不用再访问表或索引
                                                 type=const/system 常量 const用于比较primary key 或者unique索引 只匹配一行数据
                                                 type=eq_ref  使用主键或唯一性索引
                                                 type=ref   这是一种索引访问
                                                 type=ALL   进行完整的表扫描 
                                                 type=index  扫描表  但index是从索引中读取的，而all是从硬盘中读
        
        4.possible_keys                          显示可能应用在这张表中的索引
        5.key                                    实际使用的索引
        6.key_len                                使用的索引的长度
        7.ref                                    显示索引的哪一列被使用了
        8.rows                                   返回请求数据的行数
        9.Extra                                  关于MYSQL如何解析查询的额外信息

18.1000w条数据，使用limit offset 分页时，为什么越往后翻越慢？如何解决？
	越往后查询,扫描的数据越多
	解决方案：
	1.限制浏览的页数,不允许查看非常靠后的数据
	2.查询下一页时把上一页的行id作为参数传递给客户端
	sql由select * from userinfo limit 3000000,10;
	变为select * from userinfo where id>3000000 limit 10;
19.什么是索引合并？
	让一条sql可以使用多个索引。对这些索引取交集，并集，或者先取交集再取并集的操作。
	从而减少从数据表中取数据的次数，提高查询效率。
	这些需要合并的索引只能是一个表的。不能对多表进行索引合并
20.什么是覆盖索引？
	如果索引的叶子节点包含了要查询的数据，那么就不用回表查询了
	这种索引为覆盖索引。覆盖索引就是从索引中直接获取查询结果
	条件：select查询列中包含在索引列中

21.简述数据库读写分离？
	实现:两台服务器同步数据
　　　　- 利用数据库的主从分离：主，用于删除、修改、更新；从，用于查；
	Mysql读写分离的实现:
		1.基于程序代码内部实现
		2.基于中间代理层实现
	原理：
	读写分离就是在主服务器上修改,数据会同步到从服务器,从服务器只能提供读取数据，不能写入，
    实现备份的同时也实现了数据库性能的优化,以及提升了服务器安全。

22.简述数据库分库分表？（水平、垂直）
	 1、分库
		当数据库中的表太多，将某些表分到不同数据库，例如：1W张表时
		代价：连表查询跨数据库，代码变多
	2、分表
		水平分表：把一个表按某个字段拆分称多个表 例如：博客+博客详情
########################MYSQL补充#####################:	
	1.索引的原理:
		索引的原理是不断地缩小想要获取数据的范围,同时把无序的数据变成有序的查询
		1、把创建了索引的列的内容进行排序
		2、对排序结果生成倒排表
		3、在倒排表内容上拼上数据地址链
		4、在查询的时候，先拿到倒排表内容，再取出数据地址链，从而拿到具体数据
	2.索引优点
		· 加快检索速度
		· 唯一索引确保每行数据的唯一性
		· 在使用索引的过程可以优化隐藏器，提高系统性能
	3.索引缺点
		· 插入 删除 修改 维护速度下降
		· 占用物理和数据空间
	**4.索引的方法
		1.B+TREE索引：查询时间大概是O(logn)
			在B+树中，所有的记录节点都是按键值大小顺序存放在同一层的叶节点中。(数据存放在叶子上）
			叶节点间用指针相连，构成双向循环链表，非叶节点（根节点、枝节点）只存放键值，不存放实际数据。
			通常其高度都在2~3层，查询时可以有效减少IO次数
			系统从磁盘读取数据到内存时是以磁盘块（block）为基本单位的，位于同一磁盘块中的数据会被一次性读取出来，而不是按需读取
			b+树的查找过程：
				1.如果要查找数据项30，那么首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，
				2.在内存中用二分查找确定30在28和65之间，锁定磁盘块1的P2指针,通过磁盘块1的P2指针的磁盘地址把磁盘块由磁盘加载到内存，发生第二次IO，
				3.30在28和35之间，锁定当前磁盘块的P1指针，通过指针加载磁盘块到内存，发生第三次IO，同时内存中做二分查找找到30，结束查询，总计三次IO
		2.HASH索引:查询时间大概是O(1)
			hash就是一种（key=>value）形式的键值对,某一列或几列建立hash索引.hash索引可以一次定位,具有极高的效率
		HASH与BTREE比较：
			hash类型的索引：查询单条快，范围查询慢
			btree类型的索引：b+树，层数越多，数据量越大,范围查询和随机查询快（innodb默认索引类型）
		3.MySQL数据库为何要用B+树存储索引：
		    这和业务场景有关。如果只选一个数据，那确实是hash更快。但是数据库中经常会选择多条，这时候由于B+树索引有序，并且又有链表相连，它的查询效率比hash就快很多了。
		    而且数据库中的索引一般是在磁盘上，数据量大的情况可能无法一次装入内存，B+树的设计可以允许数据分批加载
	5.辅助索引和聚集索引的区别
	相同点：
    两者内部都是B+tree形式,高度是平衡的,叶子节点存放着所有的数据
	不同点：
		1.聚集索引的叶子节点存放着一整行的信息,每张表只有一个聚集索引
		2.辅助索引的叶子节点存放着单个索引列信息,通过叶子节点上的书签连接
		  再去找相应的行数据
	何时使用聚集索引或非聚集索引：
		1.列经常被分组排序,存在外键列和主键列
		2.返回某范围内的数据应使用聚集索引
		3.频繁的更新列和修改索引列应使用非聚集索引
		4.返回一个或极少不同值时都不用
	**6.请聊聊复合索引
		复合索引就是由多列的值组成的索引;并且多列的索引是有顺序的。其原理类似orderby后面可以跟多个排序条件，
		在查询的时候,遵守向最左原则，只要在查询的时候,是按照复合索引从左到右的顺序依次查询,
		不管查询条件是否完全满足所有的符合索引的列,都可以使用部分的符合索引，在实际应用中,基本上都使用复合索引;
		
		
	7.truncate和delete drop的区别？
		1、TRUNCATE 在各种表上无论是大的还是小的都非常快。而DELETE操作会被表中数据量的大小影响其执行效率.
		2、TRUNCATE不能触发触发器，DELETE会触发触发器。
		3、当表被清空后表和表的索引和自增主键将重新设置成初始大小，而delete则不能。
		4.turncate,delete都是只删除表中的数据，而表结构,索引,约束等都保持不变
			drop语句将删除表的结构以及被依赖的约束
	**8.聊聊MYSQL主从的原理？
		Mysql的主从原理：总的来说就是主mysql的DML(数据操作语言)和DDL(数据定义语言)在从mysql中执行一遍。 
		1.主mysql打开bin-log文件,打开后就会把主mysql执行过的所有DML,DDL记录到bin-log文件中，
		2.从mysql的I/O线程请求同步主mysql的bin-log文件,并写到自己的relay-log中,
		从mysql的SQL线程读取同步回来写在relay-log中的DML,DDL然后向从库中,执行相同的SQL语句，这样就同步完成了。
	9.mysq支持的复制类型:
		1.基于语句的复制。在服务器上执行sql语句，在从服务器上执行同样的语句，mysql默认采用基于语句的复制，执行效率高。
		2.基于行的复制。把改变的内容复制过去，而不是把命令在从服务器上执行一遍。
		3.混合类型的复制。默认采用基于语句的复制，一旦发现基于语句无法精确复制时，就会采用基于行的复制
	10.聊聊你们怎么做系统优化的？
		我们首先是从应用层面上做优化，比如在系统架构上采用了分布式的架构，把整个系统分为客户端和服务端,客户端只负责处理请求和响应,服务端负责具体的业务，
		客户端和服务端又可以按照业务模块拆分成多个客户端和服务端的系统，比如说订单系统，支付系统等等。
		每个业务模块系统的客户端和服务端又可以根据需要做集群。业务模块系统之间使用分布式的消息队列来做通讯。之外还引入了分布式的缓存，把活跃数据缓存起来，减少与数据库的交互。
		如果性能还有瓶颈的话，那就是数据库，这时就要考虑对数据库的优化：
		1、首先应该从表结构着手，适当的使用冗余数据，大数据字段拆成小表，常用字段分离出小表。
		2、合理的使用索引，使用EXPLAIN查看mysql的执行计划
		3、避免使用过于复杂的join和子查询，写join语句时用小结果集驱动大结果集，
		4、使用最少的查询列
		5，使用数据库主从配置，读写分离。
	**11.使用索引的代价：
		索引之所以查询快,是因为无需对整表进行扫描,就可以快速的找到所需的数据
		代价：
			1.创建索引时需要花费一定的时间
			2.插入,更新,删除的速度就变慢了
			因此，我们建立一个索引，必须保证这个索引不会"亏本"
			1.索引的字段必须是经常作为查询条件的字段;
			2.按范围查询的列，最好建立索引
			3.很少涉及的列或者重复值比较多的列，不要建立索引
			4.表中若有主键或者外键，一定要为其建立索引
				主键可以加速定位到表中的某一行。结合索引的作用，可以使得查询的速度加倍
			5.对于一些特殊的数据类型，不要建立索引
				如文本字段(TXT)、图像类型字段(IMAGE)
				这些字段的长度不确定,建立索引,那根本起不了作用
	**12.MySQL的锁：
		1.表级锁（锁定整个表）：MyISAM 操作数据都是使用的表锁,每更新一条记录就要锁整个表，导致性能较低
		2.行级锁（锁定一行）：InnoDB 采用了行级锁,需要修改哪行，就可以只锁定哪行
							  InnoDB 行锁是通过给索引项加锁实现的
							  如果不通过索引条件检索数据，那么InnoDB将对表中所有数据加锁，实际效果跟表锁一样。
							  因为没有了索引，找到某一条记录就得扫描全表,要扫描全表,就得锁定表。
		3.页级锁（锁定一页）
		表级锁：开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高,并发度最低。
		行级锁：开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低,并发度也最高。
		页面锁：开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。
		数据库的增删改操作默认都会加排他锁，而查询不会加任何锁。
		1.排它锁：对某一资源加排他锁，自身可以进行增删改查，其他人无法进行任何操作
			增删改自动加了排他锁
			select * from table for update 
		2.共享锁：对某一资源加共享锁,自身可以读该资源,其他人也可以读该资源,但无法修改。要想修改就必须等所有共享锁都释放完之后
			select * from table lock in share mode
			T1为一个线程，T2 为另一个线程。
			T1:select * from table lock in share mode
			T2:update table set column1='hello'
			T1运行并加共享锁如果T1还没执行完T2就等着
			因为 T2 在执行 update 前，试图对 table 表加一个排他锁，而数据库规定同一资源上不能同时共存共享锁和排他锁。
			所以 T2 必须等 T1 执行完，释放了共享锁，才能加上排他锁，
			T1:select * from table lock in share mode
			T2:select * from table lock in share mode
			这里T2不用等待T1执行完，而是可以马上执行。
		3.死锁的产生：
			T1:begin transelect * from table lock in share mode update table set column1='hello'
			T2:begin transelect * from table lock in share mode update table set column1='world'
			假设 T1 和 T2 同时达到 select，T1 对 table 加共享锁，T2 也对 table 加共享锁当 T1 的 select 执行完，准备执行 update 时，根据锁机制，T1 的共享锁需要升级到排他锁才能执行接下来的 update.在升级排他锁前，
			必须等 table 上的其它共享锁（T2）释放，同理，T2 也在等 T1 的共享锁释放。于是死锁产生了。
			解决的方法：当 T1 的 select 执行时，直接对表加上了排他锁,T2 在执行 select 时，就需要等 T1 事物完全执行完才能执行
						更新锁其实就可以看成排他锁的一种变形，只是它也允许其他人读（并且还允许加共享锁）。但不允许其他操作
		乐观锁与悲观锁:
			用户购买后库存数应-1，而某两个或多个用户同时购买，此时三个执行程序均同时读得库存为n，之后进行了一些操作，最后将均执行update table set 库存数=n-1，那么，很显然这是错误的。
			悲观锁:每次在拿数据的时候都会上锁,程序A在查询库存数时使用排他锁,程序B在查询库存数时，如果A还未释放排他锁，它将等待
					关闭自动提交命令为：set autocommit=0;
			乐观锁：每次去拿数据的时候不会上锁，但是在更新的时候会判断一下在此期间别人有没有去更新这个数据
			实现方式：1.使用数据版本 2.时间戳
			读用乐观锁，写用悲观锁。
			区别：
				1.悲观锁的确保了数据的安全性,但是这样会带来很大的性能问题。因此悲观锁在实际开发中使用是相对比较少的。
				2.乐观锁适用于写入比较少的情况　

	**mysql常用的查询方式
	    单表查询：
            1.简单查询
            2.条件查询
            3.区间查询 between .. and ...
            4.集合查询 in not in
            5.模糊查询 like not like
            6.排序查询：order  by 字段1   1.ASC 升序(默认)     2.DESC 降序
            7.聚合函数
            8.分组查询
            9.分页查询 limit
        多表查询：
            1.多表联合查询 union
            2.多表连接查询 join
            3.子语句查询: 第一次的查询结果可以做第二次查询的条件或者表名使用
            4.关键字：any和some  all exists 和not exists IF

        执行优先级从高到低：where > group by > having
        where 与 having区别:
        1. Where 发生在分组group by之前，因而Where中可以有任意字段，但是绝对不能使用聚合函数。
        2. Having发生在分组group by之后，因而Having中可以使用分组的字段，无法直接取到其他字段,可以使用聚合函数
        SQL 语句的执行顺序如下:
            from---where---group by ---having ---select ---order by ---limit


    13.count(1)、count(*)与count(列名)的区别:
        执行效果上：  
            count(*) count(1)包括了所有的列，相当于行数，在统计结果的时候，不会忽略值为NULL的列  
            count(列名)只包括列名那一列，在统计结果的时候，会忽略列值为空的列
        执行效率上：  
            1.列名为主键，count(列名)会比count(1)快  
            2.列名不为主键，count(1)会比count(列名)快  
            3.如果表多个列并且没有主键，则 count（1） 的执行效率优于 count（*）  
            4.如果表只有一个字段，则 select count（*）最优。
    14.MYSQL limit,offset 区别：
            SELECT  * FROM  person   LIMIT 5 OFFSET 2;  从第3条开始读，往后读5条数据
            SELECT  * FROM  person   LIMIT 5,2;  从第6条开始读，往后读2条数据
